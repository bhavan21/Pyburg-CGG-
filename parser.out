Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> spec
Rule 1     spec -> decls PPERCENT rules
Rule 2     spec -> decls
Rule 3     decls -> empty
Rule 4     decls -> decls decl
Rule 5     decl -> TERMINAL blist 

Rule 6     decl -> START lhs 

Rule 7     decl -> 

Rule 8     decl -> error 

Rule 9     blist -> empty
Rule 10    blist -> blist ID = INT
Rule 11    operand -> $ $
Rule 12    operand -> $ INT
Rule 13    operandlist -> operand
Rule 14    operandlist -> operandlist , operand
Rule 15    instruction -> ID operandlist ;
Rule 16    instructionlist -> empty
Rule 17    instructionlist -> instructionlist instruction
Rule 18    return_operand -> < operand >
Rule 19    return_operand -> empty
Rule 20    rules -> empty
Rule 21    rules -> rules lhs : tree { instructionlist } return_operand = INT cost ; 

Rule 22    rules -> rules 

Rule 23    rules -> rules error 

Rule 24    lhs -> ID
Rule 25    treelist -> treelist , tree
Rule 26    treelist -> tree
Rule 27    tree -> ID
Rule 28    tree -> ID ( treelist )
Rule 29    cost -> empty
Rule 30    cost -> ( INT )
Rule 31    empty -> <empty>

Terminals, with rules where they appear


                    : 5 6 7 8 21 22 23
$                    : 11 11 12
(                    : 28 30
)                    : 28 30
,                    : 14 25
:                    : 21
;                    : 15 21
<                    : 18
=                    : 10 21
>                    : 18
ID                   : 10 15 24 27 28
INT                  : 10 12 21 30
PPERCENT             : 1
START                : 6
TERMINAL             : 5
error                : 8 23
{                    : 21
}                    : 21

Nonterminals, with rules where they appear

blist                : 5 10
cost                 : 21
decl                 : 4
decls                : 1 2 4
empty                : 3 9 16 19 20 29
instruction          : 17
instructionlist      : 17 21
lhs                  : 6 21
operand              : 13 14 18
operandlist          : 14 15
return_operand       : 21
rules                : 1 21 22 23
spec                 : 0
tree                 : 21 25 26
treelist             : 25 28

Parsing method: LALR

state 0

    (0) S' -> . spec
    (1) spec -> . decls PPERCENT rules
    (2) spec -> . decls
    (3) decls -> . empty
    (4) decls -> . decls decl
    (31) empty -> .

    PPERCENT        reduce using rule 31 (empty -> .)
    TERMINAL        reduce using rule 31 (empty -> .)
    START           reduce using rule 31 (empty -> .)
    
               reduce using rule 31 (empty -> .)
    error           reduce using rule 31 (empty -> .)
    $end            reduce using rule 31 (empty -> .)

    decls                          shift and go to state 1
    spec                           shift and go to state 2
    empty                          shift and go to state 3

state 1

    (1) spec -> decls . PPERCENT rules
    (2) spec -> decls .
    (4) decls -> decls . decl
    (5) decl -> . TERMINAL blist 

    (6) decl -> . START lhs 

    (7) decl -> . 

    (8) decl -> . error 


    PPERCENT        shift and go to state 7
    $end            reduce using rule 2 (spec -> decls .)
    TERMINAL        shift and go to state 6
    START           shift and go to state 9
    
               shift and go to state 4
    error           shift and go to state 5

    decl                           shift and go to state 8

state 2

    (0) S' -> spec .



state 3

    (3) decls -> empty .

    PPERCENT        reduce using rule 3 (decls -> empty .)
    TERMINAL        reduce using rule 3 (decls -> empty .)
    START           reduce using rule 3 (decls -> empty .)
    
               reduce using rule 3 (decls -> empty .)
    error           reduce using rule 3 (decls -> empty .)
    $end            reduce using rule 3 (decls -> empty .)


state 4

    (7) decl -> 
 .

    PPERCENT        reduce using rule 7 (decl -> 
 .)
    TERMINAL        reduce using rule 7 (decl -> 
 .)
    START           reduce using rule 7 (decl -> 
 .)
    
               reduce using rule 7 (decl -> 
 .)
    error           reduce using rule 7 (decl -> 
 .)
    $end            reduce using rule 7 (decl -> 
 .)


state 5

    (8) decl -> error . 


    
               shift and go to state 10


state 6

    (5) decl -> TERMINAL . blist 

    (9) blist -> . empty
    (10) blist -> . blist ID = INT
    (31) empty -> .

    
               reduce using rule 31 (empty -> .)
    ID              reduce using rule 31 (empty -> .)

    blist                          shift and go to state 11
    empty                          shift and go to state 12

state 7

    (1) spec -> decls PPERCENT . rules
    (20) rules -> . empty
    (21) rules -> . rules lhs : tree { instructionlist } return_operand = INT cost ; 

    (22) rules -> . rules 

    (23) rules -> . rules error 

    (31) empty -> .

    
               reduce using rule 31 (empty -> .)
    error           reduce using rule 31 (empty -> .)
    ID              reduce using rule 31 (empty -> .)
    $end            reduce using rule 31 (empty -> .)

    rules                          shift and go to state 13
    empty                          shift and go to state 14

state 8

    (4) decls -> decls decl .

    PPERCENT        reduce using rule 4 (decls -> decls decl .)
    TERMINAL        reduce using rule 4 (decls -> decls decl .)
    START           reduce using rule 4 (decls -> decls decl .)
    
               reduce using rule 4 (decls -> decls decl .)
    error           reduce using rule 4 (decls -> decls decl .)
    $end            reduce using rule 4 (decls -> decls decl .)


state 9

    (6) decl -> START . lhs 

    (24) lhs -> . ID

    ID              shift and go to state 15

    lhs                            shift and go to state 16

state 10

    (8) decl -> error 
 .

    PPERCENT        reduce using rule 8 (decl -> error 
 .)
    TERMINAL        reduce using rule 8 (decl -> error 
 .)
    START           reduce using rule 8 (decl -> error 
 .)
    
               reduce using rule 8 (decl -> error 
 .)
    error           reduce using rule 8 (decl -> error 
 .)
    $end            reduce using rule 8 (decl -> error 
 .)


state 11

    (5) decl -> TERMINAL blist . 

    (10) blist -> blist . ID = INT

    
               shift and go to state 17
    ID              shift and go to state 18


state 12

    (9) blist -> empty .

    
               reduce using rule 9 (blist -> empty .)
    ID              reduce using rule 9 (blist -> empty .)


state 13

    (1) spec -> decls PPERCENT rules .
    (21) rules -> rules . lhs : tree { instructionlist } return_operand = INT cost ; 

    (22) rules -> rules . 

    (23) rules -> rules . error 

    (24) lhs -> . ID

    $end            reduce using rule 1 (spec -> decls PPERCENT rules .)
    
               shift and go to state 21
    error           shift and go to state 19
    ID              shift and go to state 15

    lhs                            shift and go to state 20

state 14

    (20) rules -> empty .

    
               reduce using rule 20 (rules -> empty .)
    error           reduce using rule 20 (rules -> empty .)
    ID              reduce using rule 20 (rules -> empty .)
    $end            reduce using rule 20 (rules -> empty .)


state 15

    (24) lhs -> ID .

    :               reduce using rule 24 (lhs -> ID .)
    
               reduce using rule 24 (lhs -> ID .)


state 16

    (6) decl -> START lhs . 


    
               shift and go to state 22


state 17

    (5) decl -> TERMINAL blist 
 .

    PPERCENT        reduce using rule 5 (decl -> TERMINAL blist 
 .)
    TERMINAL        reduce using rule 5 (decl -> TERMINAL blist 
 .)
    START           reduce using rule 5 (decl -> TERMINAL blist 
 .)
    
               reduce using rule 5 (decl -> TERMINAL blist 
 .)
    error           reduce using rule 5 (decl -> TERMINAL blist 
 .)
    $end            reduce using rule 5 (decl -> TERMINAL blist 
 .)


state 18

    (10) blist -> blist ID . = INT

    =               shift and go to state 23


state 19

    (23) rules -> rules error . 


    
               shift and go to state 24


state 20

    (21) rules -> rules lhs . : tree { instructionlist } return_operand = INT cost ; 


    :               shift and go to state 25


state 21

    (22) rules -> rules 
 .

    
               reduce using rule 22 (rules -> rules 
 .)
    error           reduce using rule 22 (rules -> rules 
 .)
    ID              reduce using rule 22 (rules -> rules 
 .)
    $end            reduce using rule 22 (rules -> rules 
 .)


state 22

    (6) decl -> START lhs 
 .

    PPERCENT        reduce using rule 6 (decl -> START lhs 
 .)
    TERMINAL        reduce using rule 6 (decl -> START lhs 
 .)
    START           reduce using rule 6 (decl -> START lhs 
 .)
    
               reduce using rule 6 (decl -> START lhs 
 .)
    error           reduce using rule 6 (decl -> START lhs 
 .)
    $end            reduce using rule 6 (decl -> START lhs 
 .)


state 23

    (10) blist -> blist ID = . INT

    INT             shift and go to state 26


state 24

    (23) rules -> rules error 
 .

    
               reduce using rule 23 (rules -> rules error 
 .)
    error           reduce using rule 23 (rules -> rules error 
 .)
    ID              reduce using rule 23 (rules -> rules error 
 .)
    $end            reduce using rule 23 (rules -> rules error 
 .)


state 25

    (21) rules -> rules lhs : . tree { instructionlist } return_operand = INT cost ; 

    (27) tree -> . ID
    (28) tree -> . ID ( treelist )

    ID              shift and go to state 28

    tree                           shift and go to state 27

state 26

    (10) blist -> blist ID = INT .

    
               reduce using rule 10 (blist -> blist ID = INT .)
    ID              reduce using rule 10 (blist -> blist ID = INT .)


state 27

    (21) rules -> rules lhs : tree . { instructionlist } return_operand = INT cost ; 


    {               shift and go to state 29


state 28

    (27) tree -> ID .
    (28) tree -> ID . ( treelist )

    )               reduce using rule 27 (tree -> ID .)
    ,               reduce using rule 27 (tree -> ID .)
    {               reduce using rule 27 (tree -> ID .)
    (               shift and go to state 30


state 29

    (21) rules -> rules lhs : tree { . instructionlist } return_operand = INT cost ; 

    (16) instructionlist -> . empty
    (17) instructionlist -> . instructionlist instruction
    (31) empty -> .

    }               reduce using rule 31 (empty -> .)
    ID              reduce using rule 31 (empty -> .)

    instructionlist                shift and go to state 31
    empty                          shift and go to state 32

state 30

    (28) tree -> ID ( . treelist )
    (25) treelist -> . treelist , tree
    (26) treelist -> . tree
    (27) tree -> . ID
    (28) tree -> . ID ( treelist )

    ID              shift and go to state 28

    tree                           shift and go to state 33
    treelist                       shift and go to state 34

state 31

    (21) rules -> rules lhs : tree { instructionlist . } return_operand = INT cost ; 

    (17) instructionlist -> instructionlist . instruction
    (15) instruction -> . ID operandlist ;

    }               shift and go to state 37
    ID              shift and go to state 35

    instruction                    shift and go to state 36

state 32

    (16) instructionlist -> empty .

    }               reduce using rule 16 (instructionlist -> empty .)
    ID              reduce using rule 16 (instructionlist -> empty .)


state 33

    (26) treelist -> tree .

    )               reduce using rule 26 (treelist -> tree .)
    ,               reduce using rule 26 (treelist -> tree .)


state 34

    (28) tree -> ID ( treelist . )
    (25) treelist -> treelist . , tree

    )               shift and go to state 39
    ,               shift and go to state 38


state 35

    (15) instruction -> ID . operandlist ;
    (13) operandlist -> . operand
    (14) operandlist -> . operandlist , operand
    (11) operand -> . $ $
    (12) operand -> . $ INT

    $               shift and go to state 41

    operandlist                    shift and go to state 40
    operand                        shift and go to state 42

state 36

    (17) instructionlist -> instructionlist instruction .

    }               reduce using rule 17 (instructionlist -> instructionlist instruction .)
    ID              reduce using rule 17 (instructionlist -> instructionlist instruction .)


state 37

    (21) rules -> rules lhs : tree { instructionlist } . return_operand = INT cost ; 

    (18) return_operand -> . < operand >
    (19) return_operand -> . empty
    (31) empty -> .

    <               shift and go to state 44
    =               reduce using rule 31 (empty -> .)

    return_operand                 shift and go to state 43
    empty                          shift and go to state 45

state 38

    (25) treelist -> treelist , . tree
    (27) tree -> . ID
    (28) tree -> . ID ( treelist )

    ID              shift and go to state 28

    tree                           shift and go to state 46

state 39

    (28) tree -> ID ( treelist ) .

    )               reduce using rule 28 (tree -> ID ( treelist ) .)
    ,               reduce using rule 28 (tree -> ID ( treelist ) .)
    {               reduce using rule 28 (tree -> ID ( treelist ) .)


state 40

    (15) instruction -> ID operandlist . ;
    (14) operandlist -> operandlist . , operand

    ;               shift and go to state 48
    ,               shift and go to state 47


state 41

    (11) operand -> $ . $
    (12) operand -> $ . INT

    $               shift and go to state 49
    INT             shift and go to state 50


state 42

    (13) operandlist -> operand .

    ;               reduce using rule 13 (operandlist -> operand .)
    ,               reduce using rule 13 (operandlist -> operand .)


state 43

    (21) rules -> rules lhs : tree { instructionlist } return_operand . = INT cost ; 


    =               shift and go to state 51


state 44

    (18) return_operand -> < . operand >
    (11) operand -> . $ $
    (12) operand -> . $ INT

    $               shift and go to state 41

    operand                        shift and go to state 52

state 45

    (19) return_operand -> empty .

    =               reduce using rule 19 (return_operand -> empty .)


state 46

    (25) treelist -> treelist , tree .

    )               reduce using rule 25 (treelist -> treelist , tree .)
    ,               reduce using rule 25 (treelist -> treelist , tree .)


state 47

    (14) operandlist -> operandlist , . operand
    (11) operand -> . $ $
    (12) operand -> . $ INT

    $               shift and go to state 41

    operand                        shift and go to state 53

state 48

    (15) instruction -> ID operandlist ; .

    }               reduce using rule 15 (instruction -> ID operandlist ; .)
    ID              reduce using rule 15 (instruction -> ID operandlist ; .)


state 49

    (11) operand -> $ $ .

    ;               reduce using rule 11 (operand -> $ $ .)
    ,               reduce using rule 11 (operand -> $ $ .)
    >               reduce using rule 11 (operand -> $ $ .)


state 50

    (12) operand -> $ INT .

    ;               reduce using rule 12 (operand -> $ INT .)
    ,               reduce using rule 12 (operand -> $ INT .)
    >               reduce using rule 12 (operand -> $ INT .)


state 51

    (21) rules -> rules lhs : tree { instructionlist } return_operand = . INT cost ; 


    INT             shift and go to state 54


state 52

    (18) return_operand -> < operand . >

    >               shift and go to state 55


state 53

    (14) operandlist -> operandlist , operand .

    ;               reduce using rule 14 (operandlist -> operandlist , operand .)
    ,               reduce using rule 14 (operandlist -> operandlist , operand .)


state 54

    (21) rules -> rules lhs : tree { instructionlist } return_operand = INT . cost ; 

    (29) cost -> . empty
    (30) cost -> . ( INT )
    (31) empty -> .

    (               shift and go to state 56
    ;               reduce using rule 31 (empty -> .)

    cost                           shift and go to state 57
    empty                          shift and go to state 58

state 55

    (18) return_operand -> < operand > .

    =               reduce using rule 18 (return_operand -> < operand > .)


state 56

    (30) cost -> ( . INT )

    INT             shift and go to state 59


state 57

    (21) rules -> rules lhs : tree { instructionlist } return_operand = INT cost . ; 


    ;               shift and go to state 60


state 58

    (29) cost -> empty .

    ;               reduce using rule 29 (cost -> empty .)


state 59

    (30) cost -> ( INT . )

    )               shift and go to state 61


state 60

    (21) rules -> rules lhs : tree { instructionlist } return_operand = INT cost ; . 


    
               shift and go to state 62


state 61

    (30) cost -> ( INT ) .

    ;               reduce using rule 30 (cost -> ( INT ) .)


state 62

    (21) rules -> rules lhs : tree { instructionlist } return_operand = INT cost ; 
 .

    
               reduce using rule 21 (rules -> rules lhs : tree { instructionlist } return_operand = INT cost ; 
 .)
    error           reduce using rule 21 (rules -> rules lhs : tree { instructionlist } return_operand = INT cost ; 
 .)
    ID              reduce using rule 21 (rules -> rules lhs : tree { instructionlist } return_operand = INT cost ; 
 .)
    $end            reduce using rule 21 (rules -> rules lhs : tree { instructionlist } return_operand = INT cost ; 
 .)

